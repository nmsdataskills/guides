zero
install.packages("roxygen2")
for (x %in% c(1,2,3)) {x}
for (x in c(1,2,3)) {x}
x
foreach
'abc'[1]
'abc'[[1]
]
'abc'[[1]]
as.string(list('a','b'))
as.str(list('a','b'))
as.char(list('a','b'))
print(1)
for (i in c(1,2,3)) {print(i)}
for (i in NA) {print(i)}
c()
for (i in NULL) {print(i)}
?bisection
??bisection
install.packages("NLRoot")
library(NLRoot)
?bisection
??bisection
BFfzero(x - 2, -1, 5)
f = function(x){return(x-2)}
BFfzero(f, -1, 5)
bisection <- function(ftn, x.l, x.r, tol = 1e-9) {
# applies the bisection algorithm to find x such that ftn(x) == 0
# we assume that ftn is a function of a single variable
#
# x.l and x.r must bracket the fixed point, that is
# x.l < x.r and ftn(x.l) * ftn(x.r) < 0
#
# the algorithm iteratively refines x.l and x.r and terminates when
# x.r - x.l <= tol
# check inputs
if (x.l >= x.r) {
cat("error: x.l >= x.r \n")
return(NULL)
}
f.l <- ftn(x.l)
f.r <- ftn(x.r)
if (f.l == 0) {
return(x.l)
} else if (f.r == 0) {
return(x.r)
} else if (f.l * f.r > 0) {
cat("error: ftn(x.l) * ftn(x.r) > 0 \n")
return(NULL)
}
# successively refine x.l and x.r
#n <- 0
while ((x.r - x.l) > tol) {
x.m <- (x.l + x.r)/2
f.m <- ftn(x.m)
if (f.m == 0) {
return(x.m)
} else if (f.l * f.m < 0) {
x.r <- x.m
f.r <- f.m
} else {
x.l <- x.m
f.l <- f.m
}
# n <- n + 1
#cat("at iteration", n, "the root lies between", x.l, "and", x.r, "\n")
}
# return (approximate) root
return((x.l + x.r)/2)
}
bisection(f, -1, 5)
setwd("~/work/drafts/FO6990/HW4/")
loblolly = read.csv("GulfLoblollyProfileData.csv")
loblolly$treeNum = as.factor(loblolly$treeNum)
loblolly$ht_ratio = loblolly$htAbvGrnd / loblolly$totht
loblolly$mb_y = (loblolly$dibAtHt ** 2) / (loblolly$dbhOB ** 2)
library("nlme")
Ind = function(relativeHt, jointPoint)
{
indValue = ifelse(relativeHt <= jointPoint, 1, 0)
return(indValue)
}
mb_reg = function(data, start, weights) {
return(nls(mb_y ~ b1 * (ht_ratio-1) +
b2 * ((ht_ratio^2)-1) +
b3 * ((a1-ht_ratio)^2) * Ind(ht_ratio, a1) +
b4 * ((a2-ht_ratio)^2) * Ind(ht_ratio, a2),
data=data,
start=start,
weights=weights,
control=list(maxiter=500)
))
}
smalian_vol = function(high_dib, low_dib, section_length)
{
vol = (0.005454154 * ((low_dib^2) + (high_dib^2))/2) * section_length
return(vol)
}
#Doyle Log Rule function
doyle_bf = function(high_dib, section_length, low_dib=NULL)
{
DoyleBF = (((high_dib - 4)/2)^2) * section_length
return(DoyleBF)
}
mb_loblolly_weights = 1 /
((loblolly$dbhOB ** (-0.7)) * exp((-3) * loblolly$ht_ratio))
mb_loblolly_start = list(a1=0.85, a2=0.1, b1=-4.5, b2=2.1, b3=-2, b4=100)
mb_loblolly_reg = mb_reg(loblolly, mb_loblolly_start, mb_loblolly_weights)
mb_r = mb_loblolly_reg
mb_predict = function(dbh, height, totht)
{
p = predict(mb_r,
data.frame(ht_ratio = height / totht))
return(dbh * sqrt(p))
}
mb_top = function(ht) {return(top_d - vol_model(dbh, ht, total_ht))}
dbh = 8
top_d = 8
mb_top = function(ht) {return(top_d - vol_model(dbh, ht, total_ht))}
total_ht = 73.4
mb_top = function(ht) {return(top_d - vol_model(dbh, ht, total_ht))}
mb_top(50)
mb_top = function(ht) {return(top_d - mb_predict(dbh, ht, total_ht))}
mb_top(50)
BFfzero(mb_top, 0, 70)
dbh = 14
mb_top = function(ht) {return(top_d - mb_predict(dbh, ht, total_ht))}
BFfzero(mb_top, 0, 70)
4.971206e-07
4.971206e-07 < 1
BFfzero(mb_top, 30, 70)
bisection(mb_top, 30, 70)
bisection(mb_top, 0, 70)
detach("package:NLRoot", unload=TRUE)
remove.packages("NLRoot", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
?uniroot
uniroot(mb_top, 0, 70)
uniroot(mb_top, c(0, 70))
uniroot(mb_top, c(0, 70))$root
sort(c(2,1,3))
?sort
is.empty(c())
length(c())
if (0) {print(1)}
if (1) {print(1)}
if (3) {print(1)}
if (NA) {print(1)}
is.na(NA)
is.null
vec_par = function(a, b=c()){for (x in b) {print(x)}}
vec_par(1)
vec_par(1, c(1,2))
knitr
library(knitr)
knitr::knit('HW4_2.Rmd', 'HW4_2.md')
knitr::knit('HW4_3.Rmd', 'HW4_3.md')
knitr::knit('HW4_1.Rmd', 'HW4_1.md')
knitr::knit('HW4_2.Rmd', 'HW4_2.md')
knitr::knit('HW4_1.Rmd', 'HW4_1.md')
knitr::knit('HW4_3.Rmd', 'HW4_3.md')
datasets()
datasets
data
library(help = "datasets")
colnames(faithful)
colnames(presidents)
colnames(quakes)
colnames(treering)
treering
colnames(trees)
sort(c(1,3,2))
sort(sample(1:100, replace=T))
s = sort(sample(1:100, replace=T))
mean(s)
nrows(trees)
nrow(trees)
trees
colnames(trees)
sort(trees, Volume)
sort(trees, trees$Volume)
?sort
trees[order(Volume),]
trees[order(trees$Volume),]
order(trees)
attach(trees)
trees[order(Volume),]
?attach
data()
df = trees[order(Volume),]
colnames(df)
colnames(Loblolly)
nrow(Loblolly)
head(Loblolly)
summary(Loblolly)
attach(Loblolly)
Loblolly[age ~ height]
colnames(WWWusage)
colnames(UCBAdmissions)
head(UCBAdmissions)
UCBAdmissions
head(nhtemp)
nhtemp
sleep
head(sleep)
sample(1:4, 3, replace=T)
sample(1:4, 6, replace=T)
sample(1:6, 7, replace=T)
set.seed(31337)
round(runif(7, min=1.5, max=6.5))
round(6.5)
round(6.6)
round(.5)
round(.51)
round(1.5)
runif(.5,.5)
runif(1,1)
runif(1.5,1.5)
?runif
dunif(3, 0, 1)
dunif(3, 0, 1)
dunif(3, 1, 2)
dunif(1, 2)
rexp
?rexp
rexp(20, rate=2)
plot(rexp(20, rate=2))
plot(rexp(200, rate=2))
plot(rexp(2000, rate=2))
plot(rexp(2000, rate=1))
plot(rexp(2000, rate=10))
plot(sort(rexp(200, rate=1)))
plot(sort(rexp(200, rate=3)))
?rgeom
plot(sort(rgeom(200, 0.2)))
plot(sort(rgeom(200, 0.3)))
plot(rgeom(200, 0.3))
plot(sort(rgeom(200, 0.3)))
plot(sort(rgeom(200, 0.01)))
plot(sort(rgeom(200, 0.9)))
plot(sort(rgeom(200, 0.2)))
plot(sort(rgeom(200, 0.1)))
?rgamma
plot(sort(rgamma(200)))
plot(sort(rgamma(200, 1)))
plot(sort(rgamma(200, 0.5)))
plot(sort(rgamma(200, 0.1)))
plot(sort(rgamma(200, 10)))
plot(sort(rgamma(200, 15)))
plot(sort(rgamma(200, 20)))
?rbeta
plot(sort(rbeta(200, 1, 1)))
plot(sort(rbeta(200, 1, 10)))
plot(sort(rbeta(200, 10, 10)))
plot(sort(rbeta(200, 10, 1)))
plot(sort(rbeta(200, 100, 1)))
plot(sort(rbeta(200, 100, 10)))
plot(sort(rbeta(200, 100, 50)))
plot(sort(rbeta(200, 100, 80)))
plot(sort(rbeta(200, 100, 30)))
plot(sort(rbeta(200, 10, 3)))
plot(sort(rbeta(200, 30, 100)))
?rweibull
plot(sort(rweibull(200,0.5, 1))))
plot(sort(rweibull(200,0.5, 1)))
plot(sort(rweibull(200, 1, 1)))
plot(sort(rweibull(200, shape=100'', scale=1)))
plot(sort(rweibull(200, shape=100', scale=1)))
''
plot(sort(rweibull(200, shape=100, scale=1)))
plot(sort(rweibull(200, shape=10, scale=1)))
plot(rweibull(200, shape=10, scale=1))
hist(rweibull(200, shape=10, scale=1))
hist(rweibull(200, shape=100, scale=1))
hist(rweibull(200, shape=0.1, scale=1))
hist(rweibull(200, shape=3, scale=1))
hist(rweibull(200, shape=5, scale=1))
hist(rweibull(200, shape=4, scale=1))
hist(rweibull(200, shape=3.5, scale=1))
hist(rweibull(200, shape=2.5, scale=1))
hist(rweibull(200, shape=3, scale=1))
hist(rweibull(200, shape=3, scale=0.1))
hist(rweibull(200, shape=3, scale=1))
hist(rweibull(200, shape=2, scale=1))
hist(rweibull(200, shape=1.4, scale=1))
hist(rweibull(200, shape=1, scale=1))
hist(rgamma(200, shape=100))
hist(rgamma(200, shape=1))
hist(rgamma(200, shape=3))
hist(rgamma(200, shape=5))
hist(rgamma(200, shape=50))
hist(rgamma(200, shape=1000))
hist(rbeta(200, 1, 1))
hist(rbeta(200, 10, 1))
hist(rbeta(200, 5, 1))
hist(rbeta(200, 5, 5))
hist(rbeta(200, 5, 3))
hist(rbeta(200, 5, 2))
hist(rbeta(200, 1, 5))
hist(rbeta(200, 1, 50))
hist(rbeta(200, 50, 50))
hist(rbeta(200, 15, 15))
hist(rbeta(200, 1, 1))
hist(rbeta(200, 0.1, 0.5))
hist(rbeta(200, 0.5, 0.5))
hist(rbeta(200, 0.5, 0.1))
hist(rweibull(200, shape=1.4, scale=1))
hist(rbeta(200, 0.5, 0.1))
hist(rweibull(200, shape=3, scale=1))
hist(rweibull(200, shape=1, scale=1))
hist(rweibull(200, shape=1.5, scale=1))
colnames(Loblolly)
head(Orange)
nrow(Orange)
head(trees)
plot(trees)
hist(trees)
hist(trees$Height)
hist(trees$Girth)
hist(trees$Volume)
cumsum(Height)
total_ht = sum(Height)
df
head(df)
df = trees[order(trees$Volume),]
attach(df)
Girth
cumsum(trees$Volume) == cumsum(Volume)
trees$Volume == Volume
cumsum(Height)
colnames(df)
df = trees[order(trees$Height),]
attach(df)
Height == trees$Height
total_ht = sum(Height)
df$cum_ht = cumsum(Height)
df
head(df)
cum_ht
df$prop_ht = df$cum_ht / total_ht
head(df)
cumsum(trees$Volume) == cumsum(df$Volume)
hist(Height)
tail(df)
df[,c('Girth', 'Height')]
head(df[,c('Girth', 'Height')])
tail(df)
df = trees[order(trees$Height), # Reorder rows by Height
c('Girth', 'Volume', 'Height')] # Reorder columns as described
attach(df)
total_ht = sum(Height)
df$cum_ht = cumsum(Height)
df$prop_ht = df$cum_ht / total_ht
head(df)
as.integer(TRUE)
map(function(x){x*2}, list(1,2,3))
Map(function(x){x*2}, list(1,2,3))
3,6
is.integer(v)
is.integer(c(1,2,3))
c(1,2,3) | c(T,F)
c(1,2,3) | c(T,F,T)
c(1,2,3) & c(T,F,T)
c(1,2,0) & c(T,F,T)
max(c(1,2), c(2,1))
?is.atomic
matrix(1, nrow=6, ncol=6)
matrix(1, nrow=6, ncol=6) * matrix(2, nrow=6, ncol=6)
matrix(1, nrow=6, ncol=6)[,2] * 2
l = list('x' = c(1, 2), 'y' = c(3, 4))
l['x'] # Returns list('x' = c(1, 2))
l[['x']] # Returns a list of one vector
l[['y']][2] # Returns 4
l$y # Returns a list of one vector
l[['y']][2] # Returns 4
l['x'] # Returns list('x' = c(1, 2))
l[['x']] # Returns c(1, 2)
l[['y']][2] # Returns 4
l$y # Returns a list of one vector
v = c('a' = 1, 'b' = 2)
v[1]
v['a']
v[c('b', 'a')]
v = c('a' = 1, 'b' = 2)
v[[1]] #
v[[1:2]] #
v[[c('b', 'a')]]
l = list(1, 2, 3)
l * 2
setwd('~/work/nmsds/guides/Rdatastructures')
knitr::knit('guide.Rmd', 'guide.md')
?rgamma
rgamma(4, 1)
hist(rgamma(4,1))
rweibull(4, 1)
df = data.frame(Numbers = rweibull(4, 1.5),
Counts = sample(1:100, 4, replace=TRUE),
Characters = sample(letters, 4))
df
set.seed(42)
df = data.frame(Numbers = rweibull(4, 1.5),
Counts = sample(1:100, 4, replace=TRUE),
Characters = sample(letters, 4))
df
df[c(1, 2), 'Characters'] # Get 1st and 2nd row of characters column
frstr
library(frstr)
?frstr
??frstr
?discrete_section
library(frstr)
?discrete_section
